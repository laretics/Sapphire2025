@page "/trainFlow"
@inject AeneasClient mvarAeneasClient
@inject IntStorageService mvarInternalStorage
@if(null==mcolTrains)
{
	<div class="d-flex justify-content-center">
		<div class="spinner-border" style="width: 3rem; height: 3rem;" role="status">
			<span class="visually-hidden"> Cargando información...</span>
		</div>
	</div>
}
else
{
	<CascadingValue Value="Extended">
		<CascadingValue Value="mcolTrains">
			<CascadingValue Value="Users">
				<CascadingValue Value="Status">
					<div class="row align-items-start" style="height: 50vh; width: 100%">
						<div class="col">
							<Sapphire2025.Layout.Aeneas.TrainFlowCTL
							OnStatusSelected="HandleStatusSelected"
							width="100" height="50" />
						</div>
						<div class="col">
							<Sapphire2025.Layout.Aeneas.StatusTrainsTable Width="100" Height="50" />
						</div>
					</div>
				</CascadingValue>
				<div class="row">
					<Button Class="btn-secondary" @onclick="@changeExtended" >...</Button>
				</div>
				<div class="row align-items-start" style="height: 50vh;">
					<div class="col">
						<Sapphire2025.Layout.Aeneas.AvailableTrainsTable Width="95" Height="50" />
					</div>
				</div>
			</CascadingValue>
		</CascadingValue>
	</CascadingValue>
}

@code 
{
	private IEnumerable<TrainModel>? mcolTrains{ get; set; }
	[Parameter]
	public Sapphire2025Models.Common.TrainStatus Status { get; set; }	
	[Parameter]
	public Dictionary<Guid,UserModel>? Users{ get; set; }

	private bool Extended { get; set; } = false;

	protected async override Task OnInitializedAsync()
	{
		await TrainCache();

	}

	/// <summary>
	/// Función para actualizar las tablas de trenes en función del elemento seleccionado.
	/// </summary>
	/// <param name="status"></param>
	private void HandleStatusSelected(Sapphire2025Models.Common.TrainStatus status)
	{
		Status = status;
		StateHasChanged();
	}
	private void changeExtended()
	{
		Extended = !Extended;
		StateHasChanged();
	}	

	/// <summary>
	/// Para acelerar considerablemente la ejecución del programa vamos a cargar la lista en dos
	/// fases... primero leemos del almacenamiento interno la lista completa, luego pedimos al servidor
	/// las operaciones posteriores a la última fecha y luego guardamos todo en la caché.
	/// </summary>
	private async Task TrainCache()
	{
		IEnumerable<TrainModel>? auxLista = await mvarInternalStorage.GetTrainList();
		if(null==auxLista)
		{
			//Es la primera vez que se ejecuta la sesión, así que tenemos la caché vacía.
			//Vamos a llenarla y a devolverla
			mcolTrains = await mvarAeneasClient.trainsList();
			Users = await mvarAeneasClient.usersTrainList();
			await mvarInternalStorage.SetTrainList(mcolTrains);
			await UpgradeUsersDictionary(true);
		}
		else
		{
			//Vamos a obtener sólo los datos más recientes.
			mcolTrains = auxLista;
			await UpgradeUsersDictionary(false);
			DateTime ultima = mcolTrains.Max(xx => xx.lastUpdateTime);
			IEnumerable<StatusChangeModel> colUpdates = await mvarAeneasClient.recentChangeList(ultima);
			if(colUpdates.Count(xx=>true)>0)
			{
				bool isAnyNewUser = false;
				//Hay que procesar estos elementos y añadirlos a la colección
				foreach(StatusChangeModel cambio in colUpdates)
				{
					TrainModel? auxTrain = mcolTrains.FirstOrDefault(xx => xx.id == cambio.trainId);
					if(null!=auxTrain)
					{
						auxTrain.lastUpdateTime = cambio.timeStamp;
						auxTrain.lastStatus = cambio.status;
						auxTrain.lastUserInfo = cambio.userId;
						if(Guid.Empty!=cambio.userId && null!=Users && !(Users.ContainsKey(cambio.userId)))
						{
							//Esto va a ser un caso realmente raro... un cambio en el que aparece un
							//nuevo usuario... en este caso el coste de añadir el usuario al diccionario
							//es menor que cargar el diccionario entero.
							isAnyNewUser = true;					
						}
					}
				}
				if(isAnyNewUser || null==Users || 0==Users.Count)
					await UpgradeUsersDictionary(true);
			}
		}
	}
	private async Task UpgradeUsersDictionary(bool forceExternalLoad)
	{
		Users = await mvarInternalStorage.GetTrainUsersDictionary();
		if(null==Users || forceExternalLoad)
		{
			Dictionary<Guid, UserModel>? auxDictionario = await mvarInternalStorage.GetTrainUsersDictionary();
			if (null == auxDictionario || 0==auxDictionario.Count)
			{
				//En este caso raro, a lo mejor tenemos que obtener el diccionario desde el servidor
				auxDictionario = await mvarAeneasClient.usersTrainList();
			}
			if (null != auxDictionario)
			{
				Users = auxDictionario;
				await mvarInternalStorage.SetTrainUsersDictionary(auxDictionario);
			}
		}
	}


}
