@inject IntStorageService mvarClientStorage
@namespace Sapphire2025.Pages.Authentication

<div class="profile-section mt-auto p-4">
	<div class="d-flex align-items-center">
		<div class="rounded-circle" style="height:60px">
			<svg xmlns="http://www.w3.org/2000/svg" height="60px" width="60px"
				 viewBox="0 -960 960 960"
				 alt="profile" fill="grey">
				<path d="@userIcon" />
			</svg>
		</div>
		<!--<img src="https://randomuser.me/api/portraits/women/70.jpg" style="height:60px" class="rounded-circle" alt="Profile">-->

		<div class="ms-3 profile-info">
			<h6 class="text-white mb-0">@mvarUserId</h6>
			@if(activeSession)
			{
				<a href="/auth/logout" class="text-white mb-1">Cerrar Sesión</a>
			}
			else
			{
				<a href="/auth/login" class="text-white mb-1">Abrir Sesión</a>
			}
			<!--<small class="text-muted">Admin</small>-->
		</div>
	</div>
</div>



@* <p>@mvarUserId </p> @userIcon

@if (activeSession)
{
	<a href="/auth/logout">Cerrar Sesión</a>
}
else
{
	<a href="/auth/login">Iniciar Sesión</a>
} *@

@code {
	//Este componente muestra los datos de la sesión actual leyendo desde
	//el almacenamiento interno.
	private string? mvarUserId{ get; set; }
	private Guid mvarToken{ get; set; }
	private byte mvarCredentials { get; set; }	

	protected async override Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		mvarUserId = await mvarClientStorage.GetStringValue("user",false);
		mvarToken = await mvarClientStorage.GetGuidValue("sessionToken",false);
		int valor = await mvarClientStorage.GetIntValue("credentials", false);
		mvarCredentials = (byte)valor;
		//mvarClientStorage.OnChange += StateHasChanged;
	}
	public void Dispose()
	{
		//mvarClientStorage.OnChange -= StateHasChanged;
	}


	private bool activeSession { get => !(Guid.Empty.Equals(mvarToken)); }

	private string userString
	{
		get
		{
			if(activeSession)
			{
				if (null == mvarUserId)
					return "Usuario desconocido";
				else
					return mvarUserId;
			}
			else
				return "-";
		}
	}
	private string userIcon{ get => AuthenticationClient.userIconHtml(mvarCredentials, "gray"); }
	//private RenderFragment userIcon { get => AuthenticationClient.userIcon(mvarCredentials,"gray");}
}
