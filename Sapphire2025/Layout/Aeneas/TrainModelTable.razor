
@code {
	[CascadingParameter]
	public IEnumerable<TrainModel>? Trains{ get; set; }
	[CascadingParameter]
	public Dictionary<string,UserModel>? Users{ get; set; }

	protected List<TrainModel> mcolTrains = new List<TrainModel>();

	[Parameter]
	public int Width{ get; set; }
	[Parameter]
	public int Height{ get; set; }

	private int mvarLastOrderField { get; set; } = -1;

	internal void sortFields(int fieldId)
	{
		if(null!=Trains)
		{
			if(mvarLastOrderField.Equals(fieldId))
			{
				//Orden inverso
				switch (fieldId)
				{
					case 1:
						mcolTrains = mcolTrains.OrderByDescending(xx => xx.name).ToList();
						break;
					case 2:
						mcolTrains = mcolTrains.OrderByDescending(xx => xx.lastStatus).ToList();
						break;
					default:
						mcolTrains = mcolTrains.OrderByDescending(xx => xx.lastUpdateTime).ToList();
						break;
				}
				mvarLastOrderField = -1; //Para poder volver a ordenar en directo
			}
			else
			{
				switch (fieldId)
				{
					case 1:
						mcolTrains = mcolTrains.OrderBy(xx => xx.name).ToList();
						break;
					case 2:
						mcolTrains = mcolTrains.OrderBy(xx => xx.lastStatus).ToList();
						break;
					default:
						mcolTrains = mcolTrains.OrderBy(xx => xx.lastUpdateTime).ToList();
						break;
				}
				mvarLastOrderField = fieldId;
			}			
			StateHasChanged();
		}		
	}

	internal UserModel? userFromTrain(TrainModel? train)
	{
		if(null!=Users && null!=train && null!=train.lastUserInfo)
		{
			if (Users.ContainsKey(train.lastUserInfo))
				return Users[train.lastUserInfo];
		}
		return null;
	}
}
