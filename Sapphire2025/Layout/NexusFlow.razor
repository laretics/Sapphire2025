@using Sapphire2025.Pages.Authentication
@inject InteractiveService mvarInteractiveService
@inject IntStorageService mvarClientStorage
@inherits LayoutComponentBase

<CascadingValue Value="Session">
    <div class="page">
        <nav class="sidebar d-flex flex-column flex-shrink-0 position-fixed">
            <button class="toggle-btn" onclick="toggleSidebar()">
                <i class="bi-caret-left-fill"></i>
            </button>

            <div class="p-4">
                <h4 class="logo-text fw-bold mb-0">Zafiro</h4>
            </div>

            <div class="nav flex-column">
                <NexusNav/>
            </div>

            <CurrentUserInfo/>
        </nav>

        <main class="main-content">
            <div class="container-fluid">
                @Body
            </div>
        </main>
        <script>
            function toggleSidebar() {
            const sidebar = document.querySelector('.sidebar');
            sidebar.classList.toggle('collapsed');
            }
        </script>
    </div>
</CascadingValue>
@code {
    public SessionModel? Session{ get; set; }
    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (null == mvarInteractiveService.SessionInfo)
            mvarInteractiveService.SessionInfo = await mvarClientStorage.GetSessionInfo();
        Session = mvarInteractiveService.SessionInfo;

        mvarInteractiveService.OnChange += HandleHasChangedSync;
    }

    public void Dispose()
    {
        mvarInteractiveService.OnChange -= HandleHasChangedSync;
    }
    private void UpdateSession(SessionModel? newSession)
    {
        if (null == newSession) Session = null;
        else
        {
            Session = new SessionModel
                {
                    Token = newSession.Token,
                    User = newSession.User,
                    Roles = newSession.Roles
                };
        }

    }
    private void HandleHasChangedSync()
    {
        _ = HandleHasChanged();
    }
    private async Task HandleHasChanged()
    {
		SessionModel? auxModelo = await mvarClientStorage.GetSessionInfo();
		UpdateSession(auxModelo);
        StateHasChanged();
    }

}
