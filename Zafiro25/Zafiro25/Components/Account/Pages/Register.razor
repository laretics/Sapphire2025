@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Zafiro25.Data

@inject UserManager<SFMUser> UserManager
@inject IUserStore<SFMUser> UserStore
@inject SignInManager<SFMUser> SignInManager
@inject IEmailSender<SFMUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Registro</PageTitle>

<h1>Nuevo usuario</h1>

<div class="row">
    <div class="col-md-6">
        <StatusMessage Message="@Message" />
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator />
            <h2>Create a new account.</h2>
            <hr />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="email" aria-required="true" placeholder="nombre@direccion.com" />
                <label for="email">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.userName" class="form-control" autocomplete="username" aria-required="true" placeholder="nombre" />
                <label for="nombre">Nombre</label>
                <ValidationMessage For="() => Input.userName" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.CF" class="form-control" autocomplete="cf" aria-required="true" placeholder="000" />
                <label for="CF">Carnet Ferroviario</label>
                <ValidationMessage For="() => Input.CF" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Contraseña" />
                <label for="password">Contraseña</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Contraseña" />
                <label for="confirm-password">Confirmar contraseña</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Registrar</button>
        </EditForm>
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        //await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        await UserStore.SetUserNameAsync(user, Input.userName, CancellationToken.None);
        user.CF = Input.CF;
        user.TelegramId = 0;
        user.Email = Input.Email;
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("El usuario quedó registrado con contraseña.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private SFMUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<SFMUser>();
        }
        catch
        {
            throw new InvalidOperationException($"No puede crear un nuevo '{nameof(SFMUser)}'. " +
                $"Asegúrese de que '{nameof(SFMUser)}' no es una clase abstracta y tiene un constructor sin parámetros.");
        }
    }

    private IUserEmailStore<SFMUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("La interface de usuario por defecto necesita un almacén de usuarios con soporte de correo electrónico.");
        }
        return (IUserEmailStore<SFMUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [Display(Name = "Carnet Ferroviario")]
        public string CF { get; set; } = "";

        [Required]
        [Display(Name = "Nombre")]
        public string userName { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "La {0} debe medir por lo menos {2} caracteres y no ser mayor de {1}.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Contraseña")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirmar contraseña")]
        [Compare("Password", ErrorMessage = "La contraseña y la confirmación no coinciden.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
